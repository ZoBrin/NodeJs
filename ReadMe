
This is an AngularJS web application template. It is a single page application that can load different templates
on the same page.

The template uses the following open source free components:
    1. AngularJS
    2. RequireJS - http://requirejs.org/
    3. jQuery
    4. Bootstrap - http://getbootstrap.com/
    5. nodeJS - http://nodejs.org/
    6. nodemon - http://nodemon.io/
    7. mongoose - http://mongoosejs.com/
    8. recursive-readdir - https://www.npmjs.org/package/recursive-readdir

Credit: this template was built with the inspiration of
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
http://scotch.io/tutorials/javascript/build-a-restful-api-using-node-and-express-4

How to debug the server
~~~~~~~~~~~~~~~~~~~~~~~
So far I found two easy ways to debug the application.
The first uses a node-inspector package that let you debug the application form the browser:
https://github.com/node-inspector/node-inspector
Install node-inspector using the following npm command line: npm -global node-debug
Run the server with the following command line: node-debug server.js

The second (and better in my opinion) way is to launch the nodejs in debug mode which listens to specific port
and connect the WebStorm debugger to that port. This allows you to debug the application from the WebStorm IDE.
Basically just run the server with the following command line:
nodemon --harmony --debug-brk=5858
Notes:
    1. nodemon can be replaced with just node
    2. --harmony is for using ES6 script
The debug-brk=5858 tells nodejs to listen for debug session on port 5858.
Now you need to create new NodeJs remote debug configuration in WebStorm and configure it to connect to that port (5858)
More details can be found at: https://www.jetbrains.com/webstorm/help/running-and-debugging-node-js.html


How to add new html template:
~~~~~~~~~~~~~~~~~~~~~~~~
    1. Create new template html file under the templates folder. This is the user interface that will interact with
       the controller.
    2. Create new controller js file for the template under the controllers folder.
    3. Update the routes.js file to redirect the application to your template for sepcific url.


nodeJS
~~~~~~
    1. nodeJS is the server being used by this application template.
    2. The main server file is server.js. This is the server's main entry code.
    3. The server serves both static files requests from the app folder and REST API requests.
    4. The package.json file contains all the dependency packages required for the server. The npm installer reads
        this file and automatically installs all required components.
    5. nodeJS by itself doesn't monitor changes to server files. For that you have to install the nodemon package
        by running the following command from the command line: npm install -g nodemon
        5.1 After installing it, run the server from the server.js folder using the following command: nodemon
        5.2 It will automatically find and start the server.js file

How to add new API service
~~~~~~~~~~~~~~~~~~~~~~~~~~
The API service is handlers based. Which mean that each call to the API is handled by a handler. A handler is a
javascript file that is implementing the logic of the call.
When the server starts it loads all the handlers to the node router so it will know which handler to call in return to
an API request.

    1. Define the API you want to implement and the URL that will call it.
    2. Create a new handler under the serviceLogic folder that implements the logic of the API call
        2.1 Each handler should export the following:
            2.1.1. path - the URL path of the api (relative to the base path which is defined in the
            httpListener.js file).
            2.1.2. verb - the http VERB to be used with this call
            2.1.3. handleRequest - method that will get the request and update the response when a call is made
    3. On startup, the server scans all files under the handlers folder and automatically add them to the node router.
    4. That's it. The server takes care of registering all handlers in the routes configuration


How to create and use DB model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When server starts it will automatically scan all files under the model/dbmodels folder and register them with
mongoose. In order to create new db model just create another file under that folder with the schema exported by the
module. Use the appActivityLog.js file as a reference.

To use the model that you created, call the getDbModel function of the dbModelsInitiator type with the name of the
model you just created (same as the file name).
For example:

    var appActivityModel = require('../dbModelsInitiator').getDbModel('appActivityLog');
    var activity = new appActivityModel({date:'01/01/01', activity:'Application Started'});


HTTP Server installation
    - alternative way for serving static pages with node. There is no need to use it in this application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Require http server. Quick and easy server is http-server that can be installed from the npm:
https://www.npmjs.org/package/http-server

    1. From the command line install the server globally: npm install http-server -g
    2. From the command line go to the index.html folder and execute the server from there using the following
        command line: http-server
    3. The server uses port 8081 as default
    4. Open the browser to: http://localhost:8081/index.html
